1. არის თუ არა str ტიპი მუტაბელური?
პასუხი: არა, str ტიპი იმუტაბელურია.
რატომ: სტრიქონის შინაარსის პირდაპირი ცვლილება შეუძლებელია. როცა .replace() გამოიყენება, ის აბრუნებს ახალ სტრიქონს, არ ცვლის ორიგინალს.

2. თუ str იმუტაბელურია, როგორ მუშაობს .replace()?
პასუხი: .replace() ქმნის ახალ სტრიქონს.
მაგ:

python
Copy
Edit
s = "hello"
new_s = s.replace("h", "y")
print(s)      # "hello"
print(new_s)  # "yello"
3. ყველა კოლექციის ტიპი შეესაბამება მათ ბრეკეტებს?
პასუხი: არა, არასწორია.
შესაბამობაა:

list: []

tuple: ()

dict: {}

set: {} (მაგრამ ცარიელი {} არის dict, ცარიელი set – set())

4. სწორია თუ არა სინტაქსურად “I created function”?
პასუხი: არა, ინგლისურად სწორია "I created a function".

5. არის თუ არა Python case-sensitive ენა?
პასუხი: დიახ, არის.
მაგ: Variable და variable ორი სხვადასხვა ცვლადია.

6. რა იქნება print(True + True) შედეგი?
პასუხი: 2
რატომ: Python-ში True == 1, False == 0, ამიტომ True + True == 1 + 1 == 2

7. რა დაბეჭდავს print(int("1_000_000"))?
პასუხი: 1000000
რატომ: Python 3-ში _ დაშვებულია რიცხვებში ვიზუალური გასაკონტროლებლად.

8. What will this code output?
პასუხი: არ არის მოცემული კოდი — აუცილებელია, რომ ვნახოთ კოდი კონკრეტული პასუხისთვის.

9. არის თუ არა ცარიელი ლისტი Truthy თუ Falsy?
პასუხი: Falsy
მაგ:

python
Copy
Edit
if []:
    print("True")
else:
    print("False")  # დაიბეჭდება
10. What will this code output?
პასუხი: კოდი არ ჩანს — საჭიროა კოდის ნახვა.

11. შეგვიძლია თუ არა list comprehension-ი if პირობით?
პასუხი: კი.
მაგ:

python
Copy
Edit
[x for x in range(5) if x % 2 == 0]
# [0, 2, 4]
12. შეგვიძლია თუ არა list comprehension-ი if-else პირობით?
პასუხი: კი.
მაგ:

python
Copy
Edit
["even" if x % 2 == 0 else "odd" for x in range(3)]
# ['even', 'odd', 'even']
13. შეგვიძლია თუ არა ფუნქციის შიგნით ფუნქციის განსაზღვრა?
პასუხი: კი.
მაგ:

python
Copy
Edit
def outer():
    def inner():
        return "Hello"
    return inner()
14. არის თუ არა შეცდომის ტიპი სახელად ZeroDivisionError?
პასუხი: კი.
მაგ:

python
Copy
Edit
1 / 0
# გამოიწვევს ZeroDivisionError-ს
15. რას ეწოდება lambda functions?
პასუხი: ისინი არიან ანონიმური ფუნქციები – ანუ ფუნქციები, რომლებსაც სახელი არ აქვთ.
მაგ: lambda x: x + 1

16. გაიმეორებულია კითხვა – იგივეა როგორც #15.
პასუხი: იხილეთ ზემოთ.

17. რა დაბეჭდავს print(not "")?
პასუხი: True
რატომ: ცარიელი სტრიქონი Falsy-ია, not "" -> not False -> True

18. მართალია თუ არა რომ Python-ში ყველაფერი ობიექტია?
პასუხი: დიახ, სიმართლეა.
მაგ: ცვლადები, ფუნქციები, ტიპები – ყველაფერი ობიექტებია.

19. არის თუ არა is და == ერთი და იგივე?
პასუხი: არა.

== ადარებს მნიშვნელობას

is ადარებს ობიექტის იდენტობას
მაგ:

python
Copy
Edit
a = [1, 2]
b = [1, 2]
a == b  # True
a is b  # False

20. არის Python მაღალი თუ დაბალი დონის ენა?
პასუხი: მაღალი დონის.
რატომ: Python ადვილად წაკითხვადი და ადამიანისთვის გასაგებია, აფარებს ბევრ დაბალი დონის დეტალს.